
vector的创立

vector 如果不是new 创立的话
    他本身对象实在栈上的
        但是他管理的内容是在堆里的


vector<int>* intvec = new vector<int>();
vector<int> ans;


push_back(i);

如果result是 vector<vector<int>>
那么他可以
result.push_back(vector<int>{nums[i],nums[left],nums[right]});


//初始化

初始化方法一:
这种初始化 可能会带来比较高的开销, 因为这里是一开始没有指定多少capacity, 然后再pushback
比如当前一开拓的capacity不够时候, 一般可能就会 再额外一次性开多些来重新分配空间(我觉得不会一个个分配 不然每次插入都分配 开销很大的，所以应该是一次性开多点)
std::vector<int> vec;
for (int i = 1; i <= 5; ++i) {
    vec.push_back(i);
}

初始化方法二:
这种初始化方法开销就小 (我暂时比较倾好这个)
std::vector<int> vec = {1, 2, 3, 4, 5};
当然你也可以
vec.reserve(100);  // 预留足够的capacity， 当然如果你这100的capacity用完了以后 一般可能就会 再额外一次性开多些来重新分配空间(我觉得不会一个个分配 不然每次插入都分配 开销很大的，所以应该是一次性开多点
你的
vec.size()是 5
vec.capacity()是 100


初始化方法三(制定多少元素, 每个位置上默认是什么值):
vector<int> intvec_result(3,6);
结果得到{6,6,6}

-----------------------------------
resize---vector
时间复杂度：
    如果新大小小于当前大小，resize只是截断容器，不需要分配新内存，因此时间复杂度为 O(1)。
    如果新大小大于当前大小，并且不需要重新分配内存（即当前容量足够），则时间复杂度为 O(n - current_size)，其中 n 是新大小。
        注意我们resize的是大小 而不是 capacity
            也就是说我们的capacity 有可能等于 也有可能大于当前的大小
            例如在我们的t977中的 intvec.reserve(10000);
                这个reserve是来指定 capacity的 而不是size

    如果新大小大于当前大小，并且需要重新分配内存，时间复杂度为 O(n)（旧元素的拷贝）+ O(m)（新元素的默认初始化），其中 n 是当前大小，m 是新增加的元素数量。因此，总的时间复杂度为 O(n + m)。


空间复杂度：
    如果新大小小于当前大小，不会分配额外内存，空间复杂度为 O(1)。
    如果新大小大于当前大小，并且当前容量足够，则空间复杂度为 O(1)。
    如果新大小大于当前大小，并且需要重新分配内存，空间复杂度为 O(n)，其中 n 是新大小。


-----------------------------------
使用.data()把指针传递给 另外一个方法中的 int*
fun1(){
getNext_mytryog(s,next.data());
}

getNext_mytryog(){
}
