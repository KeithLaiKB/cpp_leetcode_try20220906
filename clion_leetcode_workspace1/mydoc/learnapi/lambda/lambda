-------------------------------------------------------------
比如想要对这个二维的进行排序
[[1,3],[10,20],[2,5],[4,8]]

我们可以自定义方式, 有点像java那种什么comparator之类的

auto mycomp = [](std::vector<int> &a, std::vector<int> &b){
    //如果 vector当中的每个vector的第一个元素都想同, 那么就再比较第二个元素的大小
    if(a[0]==b[0]){
        return a[1]<b[1];
    }
    return a[0]<b[0];
};
sort(vec_vec1.begin(), vec_vec1.end(), comp);

+++++++++++++++++++++++
比如想要对这个一维的进行排序
[1,2,3,4,5]



auto mycomp = [](int a, int b) {
        return a < b;  // 升序排列
    };
std::sort(vec.begin(), vec.end(), mycomp);


情况	            时间复杂度	        备注
平均情况	        O(nlogn) ✅	        快速排序的平均复杂度
最坏情况	        O(nlogn)	        因为使用了堆排序保护，不会退化成O(n²)
最佳情况	        O(nlogn)            接近O(n)	数据接近有序时接近线性

+++++++++++++++++++++++
或者浓缩版(一维):

sort(vec.begin(), vec.end(), [](int a, int b) {
    return a < b;  // 正确：严格小于
});
-------------------------------------------------------------
当然 我该更建议独立出来

    例如 unorder_map的弄成vector

    bool static mycomp(const pair<int,int>& a, const pair<int,int> b){
        return a.second<b.second;
    };

    然后 在 我们自己的方法里
        vector<pair<int, int>> vec(map.begin(), map.end());
        sort(vec.begin(), vec.end(), mycomp); // 给频率排个序



------------------------